version: 1  # The version number of the logging configuration format

# If `disable_existing_loggers` is set to `False`, all existing loggers are preserved
# and new loggers can be added using `logging.getLogger(__name__)`
disable_existing_loggers: False

formatters:
  verbose:  # This is a formatter called "verbose"
    # This is the format string that defines how the log message will be formatted
    # The placeholders surrounded by percent signs are replaced with values from the log record
    format: "%(asctime)s | %(created)f | %(relativeCreated)d | %(levelname)s | %(process)d | %(processName)s | %(thread)d | %(threadName)s | %(pathname)s:%(lineno)d | %(stack_info)s | %(message)s"
  json:
    (): 'log_config.JSONFormatter'

handlers:
  console:  # This is a handler called "console"
    # This is the class name of the handler, which outputs log messages to the console
    class: logging.StreamHandler
    level: DEBUG  # This is the minimum logging level that this handler will handle
    formatter: verbose  # This is the formatter to use for log messages handled by this handler
    stream: ext://sys.stdout  # This is the output stream to use (stdout in this case)

  file:  # This is a handler called "file"
    # This is the class name of the handler, which outputs log messages to a file
    class: logging.handlers.RotatingFileHandler
    level: DEBUG #ERROR  # This is the minimum logging level that this handler will handle
    formatter: json  # This is the formatter to use for log messages handled by this handler
    filename: ./logs/app.log  # This is the path to the log file to write to
    maxBytes: 2000000000 # This is the maximum size of the log file in bytes (2 GB)
    backupCount: 5  # This is the number of backup log files to keep

loggers:
  root:  # This is the root logger, which is the parent logger for all loggers
    level: DEBUG  # This is the minimum logging level that this logger will handle
    handlers: [console, file]  # These are the handlers that will handle log messages for this logger
